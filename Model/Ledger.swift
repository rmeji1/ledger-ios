//
//  Ledger.swift
//  ledge
//
//  Created by robert on 2/9/18.
//  Copyright Â© 2018 com.cre8ivehouse. All rights reserved.
//

import Foundation
import Alamofire

/*
 public class CasinoDetails{
    private Long id
    private String casinoName
    private String casinoImageURL
 }
 
 public class GegaDetails{
 
 }
 
 public TableDetails{
 
 }
 */

struct CasinoDetailsFake{
    let casinoId: Int64
  var casinoCode : String
  let casinoName : String
    let casinoImageURL : String
}
struct CasinoDetails: Codable{
//  let casinoId: Int64
  var casinoCode : String
  let casinoName : String
//  let casinoImageURL : String
}

struct EmpDetails: Codable{
  let badgeNumber : String
  let name : String
}

struct TableDetails: Codable{
  var casino : Int64
  var gega: String
  var tableId: Int64
  var number : Int64
  var game: String // Needs to be an array. Table can have multiple games.
  
  
  init(gega: String, game: String, id: Int64, number: Int64){
    self.casino = 1
    self.gega = gega
    self.game = game
    self.tableId = id
    self.number = number
  }
}

struct GameDetails: Codable{
  var id : Int
  var description: String
}

struct GegaDetails: Codable{
  var id : Int
  var description: String
}

//struct LedgerDate: Codable{
//  var startDateTime : [String:String?]
//  var endDateTime : [String:String?]?
//}
//


struct Transaction: Codable{
  enum Transaction_Type : String,Codable {
    case ADDITION
    case SUBTRACTION
  }
  
  //  @Getter @Setter private Long ledgerId ;
  //
  //  @Getter @Setter private Long id;
  var ledgerId : Int64
  var employeeInitials : String
  var managerInitials : String
  var type : Transaction_Type?
  var amount : Decimal
//  var from: Int64 // From table
//  var to: Int64 // To table
}

struct LedgerDate: Codable{
  var startDateTime : String?
  var endDateTime : String?
}

class Ledger: Codable{
  var id : Int64?
  var ledgerId : String? // Casino initials plus autogenerated number.
  var casinoDetails : CasinoDetails
  var empDetails : EmpDetails?
  var tableDetails: TableDetails?
  var ledgerDate : LedgerDate?
  var active : Bool
  var transactions: [Transaction]?
  var beginningBalance: Decimal?
  var endingBalance: Decimal?
  var additionsTotal: Decimal?
  var subtractionTotal: Decimal?
  var employeeSignature : String?
  var managerSignature : String?
  
  init(casinoDetails: CasinoDetails,
       empDetails: EmpDetails?,
       tableDetails: TableDetails?,
//      ledgerDate: LedgerDate?,
      active: Bool,
      transactions: [Transaction]?,
      beginningBalance: Decimal?){
    self.ledgerId = nil
    self.casinoDetails = casinoDetails
    self.empDetails = empDetails
    self.tableDetails = tableDetails
//    self.ledgerDate = ledgerDate
    self.active = active
    self.transactions = transactions
    self.beginningBalance = beginningBalance
    self.endingBalance = Decimal(0)
    self.additionsTotal = Decimal(0)
    self.subtractionTotal = Decimal(0)
  }
  
  func append(_ trans : Transaction){
    guard let type = trans.type  else {return} // should throw error
    if transactions == nil{
      transactions = []
    }
    
    transactions?.append(trans)
    switch type {
    case .ADDITION:
      if additionsTotal == nil {
        additionsTotal = trans.amount
      }else{
        additionsTotal! += trans.amount
      }
    case .SUBTRACTION:
      if subtractionTotal == nil {
        subtractionTotal = trans.amount
      }else{
        subtractionTotal! += trans.amount
      }
    }
    
  }
}
